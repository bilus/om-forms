;; Analyzed by ClojureScript 1.7.122
{:name reforms.om, :doc nil, :excludes #{time}, :use-macros {import-vars reforms.core.import}, :require-macros {reforms.core.import reforms.core.import, reforms.core reforms.core}, :uses nil, :requires {reforms.core reforms.core, reforms.binding.om reforms.binding.om}, :imports nil, :defs {form {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 81, :column 7, :end-line 81, :end-column 11, :arglists (quote ([& args])), :doc "A form. See http://getbootstrap.com/css/#forms\n\n   Arguments:\n\n   [attrs] element1 ... element2\n\n   - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - contents - (optional) the contained elements\n\n   Examples:\n\n       (form [:div \"Contents go here\"])\n       (form {:style {:background-color \"red\"}} [:div \"Contents go here\"])", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/form, :file "src/reforms/om.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 81, :arglists (quote ([& args])), :doc "A form. See http://getbootstrap.com/css/#forms\n\n   Arguments:\n\n   [attrs] element1 ... element2\n\n   - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - contents - (optional) the contained elements\n\n   Examples:\n\n       (form [:div \"Contents go here\"])\n       (form {:style {:background-color \"red\"}} [:div \"Contents go here\"])"}, get-options {:name reforms.om/get-options, :file "src/reforms/om.cljs", :line 13, :column 1, :end-line 15, :end-column 17, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 15, :column 6, :end-line 15, :end-column 17}}, button-primary {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 213, :column 7, :end-line 213, :end-column 21, :arglists (quote ([& args])), :doc "Primary button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   See `button`.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/button-primary, :file "src/reforms/om.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 213, :arglists (quote ([& args])), :doc "Primary button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   See `button`."}, text {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 153, :column 7, :end-line 153, :end-column 11, :arglists (quote ([& args])), :doc "Text input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/text, :file "src/reforms/om.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 153, :arglists (quote ([& args])), :doc "Text input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, select {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 358, :column 7, :end-line 358, :end-column 13, :arglists (quote ([& args])), :doc "Select element. See http://getbootstrap.com/css/#selects\n\n   Arguments:\n\n   [attrs] label cursor korks options [:on-change <lambda>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - (optional) the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - options               - a vector containing options and their labels (see examples below)\n   - :on-change            - (optional) lambda to call on selection\n\n\n   Examples:\n\n       (f/select \"Select\" data [:select]\n           [[:option1 \"Option 1\"] [:option2 \"Option 2\"] [:option3 \"Option 3\"]])\n       (f/select {:class \"my-special-selector\"} \"Select\" data [:select]\n           :on-change #(js/alert @data)\n           [[:option1 \"Option 1\"] [:option2 \"Option 2\"] [:option3 \"Option 3\"]])", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/select, :file "src/reforms/om.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 358, :arglists (quote ([& args])), :doc "Select element. See http://getbootstrap.com/css/#selects\n\n   Arguments:\n\n   [attrs] label cursor korks options [:on-change <lambda>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - (optional) the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - options               - a vector containing options and their labels (see examples below)\n   - :on-change            - (optional) lambda to call on selection\n\n\n   Examples:\n\n       (f/select \"Select\" data [:select]\n           [[:option1 \"Option 1\"] [:option2 \"Option 2\"] [:option3 \"Option 3\"]])\n       (f/select {:class \"my-special-selector\"} \"Select\" data [:select]\n           :on-change #(js/alert @data)\n           [[:option1 \"Option 1\"] [:option2 \"Option 2\"] [:option3 \"Option 3\"]])"}, datetime-local {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 411, :column 7, :end-line 411, :end-column 21, :arglists (quote ([& args])), :doc "Datetime-local input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/datetime-local, :file "src/reforms/om.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 411, :arglists (quote ([& args])), :doc "Datetime-local input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, button-default {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 223, :column 7, :end-line 223, :end-column 21, :arglists (quote ([& args])), :doc "Default button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   See `button`.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/button-default, :file "src/reforms/om.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 223, :arglists (quote ([& args])), :doc "Default button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   See `button`."}, form-buttons {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 176, :column 7, :end-line 176, :end-column 19, :arglists (quote ([& buttons])), :doc "Auto-aligning form buttons.\n\n   Arguments:\n\n   button-1 ... button-n", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(buttons)], :arglists ([& buttons]), :arglists-meta (nil)}}, :name reforms.om/form-buttons, :file "src/reforms/om.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(buttons)], :arglists ([& buttons]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 176, :arglists (quote ([& buttons])), :doc "Auto-aligning form buttons.\n\n   Arguments:\n\n   button-1 ... button-n"}, html5-input {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 123, :column 7, :end-line 123, :end-column 18, :arglists (quote ([type & args])), :doc "An HTML5-compatible input. Used internally to implement most input types.\n\n   Arguments:\n\n   type [attrs] [label] cursor korks [:in-progress BOOL] [:warn-fn LAMBDA]\n   [help RENDERABLE] [:inline BOOL] [:large BOOL] [:placeholder STRING] [:valid? BOOL] [:validation-error-fn LAMBDA]\n\n   - type                  - input type\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - (optional) the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :in-progress          - (optional) if true shows progress spinner\n   - :warn-fn              - (optional) a predicate invoked on the input's value; if it returns a RENDERABLE,\n                             it will be shown as a warning label\n   - :help                 - (optional) help block\n   - :inline               - (optional) if true renders the control inline\n   - :large                - (optional) if true the input will have a larger size\n   - :placeholder          - (optional) the input's placeholder text\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal\n\n   RENDERABLE - string, hiccup-style markup or a React component.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(type args)], :arglists ([type & args]), :arglists-meta (nil)}}, :name reforms.om/html5-input, :file "src/reforms/om.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(type args)], :arglists ([type & args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 123, :arglists (quote ([type & args])), :doc "An HTML5-compatible input. Used internally to implement most input types.\n\n   Arguments:\n\n   type [attrs] [label] cursor korks [:in-progress BOOL] [:warn-fn LAMBDA]\n   [help RENDERABLE] [:inline BOOL] [:large BOOL] [:placeholder STRING] [:valid? BOOL] [:validation-error-fn LAMBDA]\n\n   - type                  - input type\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - (optional) the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :in-progress          - (optional) if true shows progress spinner\n   - :warn-fn              - (optional) a predicate invoked on the input's value; if it returns a RENDERABLE,\n                             it will be shown as a warning label\n   - :help                 - (optional) help block\n   - :inline               - (optional) if true renders the control inline\n   - :large                - (optional) if true the input will have a larger size\n   - :placeholder          - (optional) the input's placeholder text\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal\n\n   RENDERABLE - string, hiccup-style markup or a React component."}, email {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 483, :column 7, :end-line 483, :end-column 12, :arglists (quote ([& args])), :doc "Email input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/email, :file "src/reforms/om.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 483, :arglists (quote ([& args])), :doc "Email input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, date {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 423, :column 7, :end-line 423, :end-column 11, :arglists (quote ([& args])), :doc "Date input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/date, :file "src/reforms/om.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 423, :arglists (quote ([& args])), :doc "Date input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, week {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 459, :column 7, :end-line 459, :end-column 11, :arglists (quote ([& args])), :doc "Week input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/week, :file "src/reforms/om.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 459, :arglists (quote ([& args])), :doc "Week input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, group-title {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 107, :column 7, :end-line 107, :end-column 18, :arglists (quote ([& args])), :doc "A title for a logical group of controls.\n\n   Arguments:\n\n   [attrs] title [:tag <tag-name>]\n\n   - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - title - the title; a string or Hiccup/Sablono style template\n   - tag   - (optional) name of the tag to use, e.g. :h4", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/group-title, :file "src/reforms/om.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 107, :arglists (quote ([& args])), :doc "A title for a logical group of controls.\n\n   Arguments:\n\n   [attrs] title [:tag <tag-name>]\n\n   - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - title - the title; a string or Hiccup/Sablono style template\n   - tag   - (optional) name of the tag to use, e.g. :h4"}, color {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 531, :column 7, :end-line 531, :end-column 12, :arglists (quote ([& args])), :doc "Color input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/color, :file "src/reforms/om.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 531, :arglists (quote ([& args])), :doc "Color input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, radio {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 284, :column 7, :end-line 284, :end-column 12, :arglists (quote ([& args])), :doc "Radio button. See http://getbootstrap.com/css/#checkboxes-and-radios\n\n   Arguments:\n\n   [attrs] label cursor korks value [:valid? <bool> :validation-error-fn <lambda> :inline <bool>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/radio, :file "src/reforms/om.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 284, :arglists (quote ([& args])), :doc "Radio button. See http://getbootstrap.com/css/#checkboxes-and-radios\n\n   Arguments:\n\n   [attrs] label cursor korks value [:valid? <bool> :validation-error-fn <lambda> :inline <bool>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal"}, number {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 471, :column 7, :end-line 471, :end-column 13, :arglists (quote ([& args])), :doc "Number input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/number, :file "src/reforms/om.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 471, :arglists (quote ([& args])), :doc "Number input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, password {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 164, :column 7, :end-line 164, :end-column 15, :arglists (quote ([& args])), :doc "Password input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/password, :file "src/reforms/om.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 164, :arglists (quote ([& args])), :doc "Password input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, checkbox {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 246, :column 7, :end-line 246, :end-column 15, :arglists (quote ([& args])), :doc "Checkbox. See http://getbootstrap.com/css/#checkboxes-and-radios\n\n  Arguments:\n\n  [attrs] label cursor korks value [:valid? <bool> :validation-error-fn <lambda> :inline <bool>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/checkbox, :file "src/reforms/om.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 246, :arglists (quote ([& args])), :doc "Checkbox. See http://getbootstrap.com/css/#checkboxes-and-radios\n\n  Arguments:\n\n  [attrs] label cursor korks value [:valid? <bool> :validation-error-fn <lambda> :inline <bool>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal"}, button {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 185, :column 7, :end-line 185, :end-column 13, :arglists (quote ([& args])), :doc "Button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   [attrs] label on-click [:in-progress <bool> :disabled <bool]\n\n   - attrs        - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label        - button label; a string or Hiccup/Sablono style template\n   - on-click     - lambda to handle clicks\n   - :in-progress - true to show an indicator that a background action is in progress and disable the button\n   - :disabled    - true to disable the button", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/button, :file "src/reforms/om.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 185, :arglists (quote ([& args])), :doc "Button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   [attrs] label on-click [:in-progress <bool> :disabled <bool]\n\n   - attrs        - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label        - button label; a string or Hiccup/Sablono style template\n   - on-click     - lambda to handle clicks\n   - :in-progress - true to show an indicator that a background action is in progress and disable the button\n   - :disabled    - true to disable the button"}, time {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 447, :column 7, :end-line 447, :end-column 11, :arglists (quote ([& args])), :doc "Time input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/time, :file "src/reforms/om.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 447, :arglists (quote ([& args])), :doc "Time input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, month {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 435, :column 7, :end-line 435, :end-column 12, :arglists (quote ([& args])), :doc "Month input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/month, :file "src/reforms/om.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 435, :arglists (quote ([& args])), :doc "Month input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, set-options! {:name reforms.om/set-options!, :file "src/reforms/om.cljs", :line 13, :column 1, :end-line 23, :end-column 18, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 23, :column 6, :end-line 23, :end-column 18}}, search {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 507, :column 7, :end-line 507, :end-column 13, :arglists (quote ([& args])), :doc "Search input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/search, :file "src/reforms/om.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 507, :arglists (quote ([& args])), :doc "Search input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, tel {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 519, :column 7, :end-line 519, :end-column 10, :arglists (quote ([& args])), :doc "Tel input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/tel, :file "src/reforms/om.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 519, :arglists (quote ([& args])), :doc "Tel input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, spinner {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 543, :column 7, :end-line 543, :end-column 14, :arglists (quote ([& args])), :doc "A spinner.\n\n   Arguments:\n\n   [attrs]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/spinner, :file "src/reforms/om.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 543, :arglists (quote ([& args])), :doc "A spinner.\n\n   Arguments:\n\n   [attrs]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)"}, panel {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 46, :column 7, :end-line 46, :end-column 12, :arglists (quote ([& args])), :doc "A panel. See http://getbootstrap.com/components/#panels\n\n   Arguments:\n\n   [attrs] title [:close <lambda>] element1 ... element2\n\n    - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n    - title - panel title; a string or Hiccup/Sablono style template\n    - :close - (optional) lambda to call when panel is closed; when the option is set, the panel shows a close icon (FontAwesome by default)\n    - contents - (optional) the contained elements\n\n   Examples:\n\n       (panel \"A simple panel\"\n           [:div \"Contents go here\"])\n       (panel {:class \"my-special-panel\"} \"My special panel\" :close #(js/alert \"closed\")\n           [:div \"Contents go here\"])", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/panel, :file "src/reforms/om.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 46, :arglists (quote ([& args])), :doc "A panel. See http://getbootstrap.com/components/#panels\n\n   Arguments:\n\n   [attrs] title [:close <lambda>] element1 ... element2\n\n    - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n    - title - panel title; a string or Hiccup/Sablono style template\n    - :close - (optional) lambda to call when panel is closed; when the option is set, the panel shows a close icon (FontAwesome by default)\n    - contents - (optional) the contained elements\n\n   Examples:\n\n       (panel \"A simple panel\"\n           [:div \"Contents go here\"])\n       (panel {:class \"my-special-panel\"} \"My special panel\" :close #(js/alert \"closed\")\n           [:div \"Contents go here\"])"}, textarea {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 324, :column 7, :end-line 324, :end-column 15, :arglists (quote ([& args])), :doc "Textarea element. See http://getbootstrap.com/css/#textarea\n\n   Arguments:\n\n   [attrs] [label] cursor korks [opts]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - (optional) the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - opts                  - see [[html5-input]]\n\n\n   Examples:\n\n       (f/textarea \"Textarea\" \"A placeholder\" data [:some-text])\n       (f/textarea {:rows 8} \"Textarea\" \"A placeholder\" data [:some-text] :inline true)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/textarea, :file "src/reforms/om.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 324, :arglists (quote ([& args])), :doc "Textarea element. See http://getbootstrap.com/css/#textarea\n\n   Arguments:\n\n   [attrs] [label] cursor korks [opts]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - (optional) the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - opts                  - see [[html5-input]]\n\n\n   Examples:\n\n       (f/textarea \"Textarea\" \"A placeholder\" data [:some-text])\n       (f/textarea {:rows 8} \"Textarea\" \"A placeholder\" data [:some-text] :inline true)"}, button-group {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 233, :column 7, :end-line 233, :end-column 19, :arglists (quote ([& args])), :doc "Button group.\n\n   Arguments:\n\n   [attrs] button-1 ... button-n\n\n   - attrs        - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/button-group, :file "src/reforms/om.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 233, :arglists (quote ([& args])), :doc "Button group.\n\n   Arguments:\n\n   [attrs] button-1 ... button-n\n\n   - attrs        - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)"}, datetime {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 399, :column 7, :end-line 399, :end-column 15, :arglists (quote ([& args])), :doc "Datetime input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/datetime, :file "src/reforms/om.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 399, :arglists (quote ([& args])), :doc "Datetime input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, url {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/../reforms/src/reforms/core.cljs", :line 495, :column 7, :end-line 495, :end-column 10, :arglists (quote ([& args])), :doc "Url input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.om/url, :file "src/reforms/om.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :column 1, :line 13, :end-line 495, :arglists (quote ([& args])), :doc "Url input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}}}