;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name reforms.core.react-keys, :imports {IdGenerator goog.ui.IdGenerator}, :requires {binding reforms.binding.core, reforms.binding.core reforms.binding.core, str clojure.string, clojure.string clojure.string, IdGenerator goog.ui.IdGenerator}, :uses nil, :defs {to-str {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/examples/hello_world/out/reforms/core/react_keys.cljs", :line 6, :column 7, :end-line 6, :end-column 13, :arglists (quote ([x]))}, :name reforms.core.react-keys/to-str, :variadic false, :file "examples/hello_world/out/reforms/core/react_keys.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, gen-key {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/om-reforms/examples/hello_world/out/reforms/core/react_keys.cljs", :line 18, :column 7, :end-line 18, :end-column 14, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core.react-keys/gen-key, :variadic true, :file "examples/hello_world/out/reforms/core/react_keys.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}