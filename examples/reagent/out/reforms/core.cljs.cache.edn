;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{time}, :name reforms.core, :imports nil, :requires {binding reforms.binding.core, reforms.binding.core reforms.binding.core, impl reforms.core.impl, reforms.core.impl reforms.core.impl, reforms.core.react-keys reforms.core.react-keys, options reforms.core.options, reforms.core.options reforms.core.options}, :uses {gen-key reforms.core.react-keys}, :defs {form {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 84, :column 7, :end-line 84, :end-column 11, :arglists (quote ([& args])), :doc "A form. See http://getbootstrap.com/css/#forms\n\n   Arguments:\n\n   [attrs] element1 ... element2\n\n   - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - contents - (optional) the contained elements\n\n   Examples:\n\n       (form [:div \"Contents go here\"])\n       (form {:style {:background-color \"red\"}} [:div \"Contents go here\"])", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/form, :variadic true, :file "src/reforms/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "A form. See http://getbootstrap.com/css/#forms\n\n   Arguments:\n\n   [attrs] element1 ... element2\n\n   - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - contents - (optional) the contained elements\n\n   Examples:\n\n       (form [:div \"Contents go here\"])\n       (form {:style {:background-color \"red\"}} [:div \"Contents go here\"])"}, get-options {:name reforms.core/get-options, :file "src/reforms/core.cljs", :line 17, :column 1, :end-line 17, :end-column 17, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 17, :column 6, :end-line 17, :end-column 17}, :doc "Get configuration option(s) by key. See [[reforms.core.options]].\n\n   Arguments:\n\n   - ks - key seq"}, button-primary {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 207, :column 7, :end-line 207, :end-column 21, :arglists (quote ([& args])), :doc "Primary button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   See `button`.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/button-primary, :variadic true, :file "src/reforms/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Primary button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   See `button`."}, text {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 147, :column 7, :end-line 147, :end-column 11, :arglists (quote ([& args])), :doc "Text input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/text, :variadic true, :file "src/reforms/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Text input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, select {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 348, :column 7, :end-line 348, :end-column 13, :arglists (quote ([& args])), :doc "Select element. See http://getbootstrap.com/css/#selects\n\n   Arguments:\n\n   [attrs] label cursor korks options [:on-change <lambda>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - options               - a vector containing options and their labels (see examples below)\n   - :on-change            - (optional) lambda to call on selection\n\n\n   Examples:\n\n       (f/select \"Select\" data [:select]\n           [[:option1 \"Option 1\"] [:option2 \"Option 2\"] [:option3 \"Option 3\"]])\n       (f/select {:class \"my-special-selector\"} \"Select\" data [:select]\n           :on-change #(js/alert @data)\n           [[:option1 \"Option 1\"] [:option2 \"Option 2\"] [:option3 \"Option 3\"]])", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/select, :variadic true, :file "src/reforms/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Select element. See http://getbootstrap.com/css/#selects\n\n   Arguments:\n\n   [attrs] label cursor korks options [:on-change <lambda>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - options               - a vector containing options and their labels (see examples below)\n   - :on-change            - (optional) lambda to call on selection\n\n\n   Examples:\n\n       (f/select \"Select\" data [:select]\n           [[:option1 \"Option 1\"] [:option2 \"Option 2\"] [:option3 \"Option 3\"]])\n       (f/select {:class \"my-special-selector\"} \"Select\" data [:select]\n           :on-change #(js/alert @data)\n           [[:option1 \"Option 1\"] [:option2 \"Option 2\"] [:option3 \"Option 3\"]])"}, datetime-local {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 397, :column 7, :end-line 397, :end-column 21, :arglists (quote ([& args])), :doc "Datetime-local input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/datetime-local, :variadic true, :file "src/reforms/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 397, :end-line 397, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Datetime-local input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, button-default {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 217, :column 7, :end-line 217, :end-column 21, :arglists (quote ([& args])), :doc "Default button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   See `button`.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/button-default, :variadic true, :file "src/reforms/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Default button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   See `button`."}, form-buttons {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 170, :column 7, :end-line 170, :end-column 19, :arglists (quote ([& buttons])), :doc "Auto-aligning form buttons.\n\n   Arguments:\n\n   button-1 ... button-n", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(buttons)], :arglists ([& buttons]), :arglists-meta (nil)}}, :name reforms.core/form-buttons, :variadic true, :file "src/reforms/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(buttons)], :arglists ([& buttons]), :arglists-meta (nil)}, :method-params [(buttons)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 0, :fn-var true, :arglists ([& buttons]), :doc "Auto-aligning form buttons.\n\n   Arguments:\n\n   button-1 ... button-n"}, html5-input {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 128, :column 7, :end-line 128, :end-column 18, :arglists (quote ([type & args])), :doc "An HTML5-compatible input. Used internally to implement most input types.\n\n   Arguments:\n\n   type [attrs] label placeholder cursor korks\n   [:valid? <bool> validation-error-fn <lambda> in-progress <bool> warn-fn <bool> help <string> inline <bool> large <bool>]}\n\n   - type                  - input type\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(type args)], :arglists ([type & args]), :arglists-meta (nil)}}, :name reforms.core/html5-input, :variadic true, :file "src/reforms/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(type args)], :arglists ([type & args]), :arglists-meta (nil)}, :method-params [(type args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists ([type & args]), :doc "An HTML5-compatible input. Used internally to implement most input types.\n\n   Arguments:\n\n   type [attrs] label placeholder cursor korks\n   [:valid? <bool> validation-error-fn <lambda> in-progress <bool> warn-fn <bool> help <string> inline <bool> large <bool>]}\n\n   - type                  - input type\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal"}, email {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 469, :column 7, :end-line 469, :end-column 12, :arglists (quote ([& args])), :doc "Email input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/email, :variadic true, :file "src/reforms/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 469, :end-line 469, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Email input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, date {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 409, :column 7, :end-line 409, :end-column 11, :arglists (quote ([& args])), :doc "Date input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/date, :variadic true, :file "src/reforms/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 409, :end-line 409, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Date input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, week {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 445, :column 7, :end-line 445, :end-column 11, :arglists (quote ([& args])), :doc "Week input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/week, :variadic true, :file "src/reforms/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 445, :end-line 445, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Week input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, group-title {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 111, :column 7, :end-line 111, :end-column 18, :arglists (quote ([& args])), :doc "A title for a logical group of controls.\n\n   Arguments:\n\n   [attrs] title [:tag <tag-name>]\n\n   - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - title - the title; a string or Hiccup/Sablono style template\n   - tag   - (optional) name of the tag to use, e.g. :h4", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/group-title, :variadic true, :file "src/reforms/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "A title for a logical group of controls.\n\n   Arguments:\n\n   [attrs] title [:tag <tag-name>]\n\n   - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - title - the title; a string or Hiccup/Sablono style template\n   - tag   - (optional) name of the tag to use, e.g. :h4"}, color {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 517, :column 7, :end-line 517, :end-column 12, :arglists (quote ([& args])), :doc "Color input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/color, :variadic true, :file "src/reforms/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 517, :end-line 517, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Color input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, radio {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 278, :column 7, :end-line 278, :end-column 12, :arglists (quote ([& args])), :doc "Radio button. See http://getbootstrap.com/css/#checkboxes-and-radios\n\n   Arguments:\n\n   [attrs] label cursor korks value [:valid? <bool> :validation-error-fn <lambda> :inline <bool>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/radio, :variadic true, :file "src/reforms/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Radio button. See http://getbootstrap.com/css/#checkboxes-and-radios\n\n   Arguments:\n\n   [attrs] label cursor korks value [:valid? <bool> :validation-error-fn <lambda> :inline <bool>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal"}, number {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 457, :column 7, :end-line 457, :end-column 13, :arglists (quote ([& args])), :doc "Number input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/number, :variadic true, :file "src/reforms/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Number input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, password {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 158, :column 7, :end-line 158, :end-column 15, :arglists (quote ([& args])), :doc "Password input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/password, :variadic true, :file "src/reforms/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Password input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, checkbox {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 240, :column 7, :end-line 240, :end-column 15, :arglists (quote ([& args])), :doc "Checkbox. See http://getbootstrap.com/css/#checkboxes-and-radios\n\n  Arguments:\n\n  [attrs] label cursor korks value [:valid? <bool> :validation-error-fn <lambda> :inline <bool>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/checkbox, :variadic true, :file "src/reforms/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Checkbox. See http://getbootstrap.com/css/#checkboxes-and-radios\n\n  Arguments:\n\n  [attrs] label cursor korks value [:valid? <bool> :validation-error-fn <lambda> :inline <bool>]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - cursor, korks         - data to bind to\n   - :inline               - (optional) if true renders the control inline\n   - :valid?               - (optional) if false shows a validation error; internal\n   - :validation-error-fn  - (optional) lambda <korks> -> <error message>; internal"}, button {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 179, :column 7, :end-line 179, :end-column 13, :arglists (quote ([& args])), :doc "Button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   [attrs] label on-click [:in-progress <bool> :disabled <bool]\n\n   - attrs        - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label        - button label; a string or Hiccup/Sablono style template\n   - on-click     - lambda to handle clicks\n   - :in-progress - true to show an indicator that a background action is in progress and disable the button\n   - :disabled    - true to disable the button", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/button, :variadic true, :file "src/reforms/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Button. See http://getbootstrap.com/css/#buttons\n\n   Arguments:\n\n   [attrs] label on-click [:in-progress <bool> :disabled <bool]\n\n   - attrs        - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label        - button label; a string or Hiccup/Sablono style template\n   - on-click     - lambda to handle clicks\n   - :in-progress - true to show an indicator that a background action is in progress and disable the button\n   - :disabled    - true to disable the button"}, time {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 433, :column 7, :end-line 433, :end-column 11, :arglists (quote ([& args])), :doc "Time input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/time, :variadic true, :file "src/reforms/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 433, :end-line 433, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Time input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, month {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 421, :column 7, :end-line 421, :end-column 12, :arglists (quote ([& args])), :doc "Month input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/month, :variadic true, :file "src/reforms/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 421, :end-line 421, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Month input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, set-options! {:name reforms.core/set-options!, :file "src/reforms/core.cljs", :line 25, :column 1, :end-line 25, :end-column 18, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 25, :column 6, :end-line 25, :end-column 18}, :doc "Sets configuration options. See [[reforms.core.options]].\n\n   Arguments:\n\n   - options - a map specifying options to merge into current option map.\n\n   **Note:** It intelligently merges options; see the example below.\n\n   Example:\n\n       ;; Example initial configuration:\n       {:form {:horizontal true\n               :attrs {:style {:background-color \"yellow\"}}}}\n\n       ;; Setting options\n       (set-options! {:form {:attrs {:style {:border \"1px solid black\"}}}{)\n\n       ;; Resulting configuration:\n       {:form {:horizontal true\n               :attrs {:style {:background-color \"yellow\"}}}"}, search {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 493, :column 7, :end-line 493, :end-column 13, :arglists (quote ([& args])), :doc "Search input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/search, :variadic true, :file "src/reforms/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 493, :end-line 493, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Search input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, tel {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 505, :column 7, :end-line 505, :end-column 10, :arglists (quote ([& args])), :doc "Tel input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/tel, :variadic true, :file "src/reforms/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 505, :end-line 505, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Tel input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, spinner {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 529, :column 7, :end-line 529, :end-column 14, :arglists (quote ([& args])), :doc "A spinner.\n\n   Arguments:\n\n   [attrs]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/spinner, :variadic true, :file "src/reforms/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "A spinner.\n\n   Arguments:\n\n   [attrs]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)"}, panel {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 48, :column 7, :end-line 48, :end-column 12, :arglists (quote ([& args])), :doc "A panel. See http://getbootstrap.com/components/#panels\n\n   Arguments:\n\n   [attrs] title [:close <lambda>] element1 ... element2\n\n    - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n    - title - panel title; a string or Hiccup/Sablono style template\n    - :close - (optional) lambda to call when panel is closed; when the option is set, the panel shows a close icon (FontAwesome by default)\n    - contents - (optional) the contained elements\n\n   Examples:\n\n       (panel \"A simple panel\"\n           [:div \"Contents go here\"])\n       (panel {:class \"my-special-panel\"} \"My special panel\" :close #(js/alert \"closed\")\n           [:div \"Contents go here\"])", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/panel, :variadic true, :file "src/reforms/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "A panel. See http://getbootstrap.com/components/#panels\n\n   Arguments:\n\n   [attrs] title [:close <lambda>] element1 ... element2\n\n    - attrs - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n    - title - panel title; a string or Hiccup/Sablono style template\n    - :close - (optional) lambda to call when panel is closed; when the option is set, the panel shows a close icon (FontAwesome by default)\n    - contents - (optional) the contained elements\n\n   Examples:\n\n       (panel \"A simple panel\"\n           [:div \"Contents go here\"])\n       (panel {:class \"my-special-panel\"} \"My special panel\" :close #(js/alert \"closed\")\n           [:div \"Contents go here\"])"}, textarea {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 318, :column 7, :end-line 318, :end-column 15, :arglists (quote ([& args])), :doc "Textarea element. See http://getbootstrap.com/css/#textarea\n\n   Arguments:\n\n   [attrs] label placeholder cursor korks [opts]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - placeholder           - placeholder text shown if there is no value\n   - cursor, korks         - data to bind to\n   - opts                  - see [[html5-input]]\n\n\n   Examples:\n\n       (f/textarea \"Textarea\" \"A placeholder\" data [:some-text])\n       (f/textarea {:rows 8} \"Textarea\" \"A placeholder\" data [:some-text] :inline true)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/textarea, :variadic true, :file "src/reforms/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Textarea element. See http://getbootstrap.com/css/#textarea\n\n   Arguments:\n\n   [attrs] label placeholder cursor korks [opts]\n\n   - attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)\n   - label                 - the label; a string or Hiccup/Sablono style template\n   - placeholder           - placeholder text shown if there is no value\n   - cursor, korks         - data to bind to\n   - opts                  - see [[html5-input]]\n\n\n   Examples:\n\n       (f/textarea \"Textarea\" \"A placeholder\" data [:some-text])\n       (f/textarea {:rows 8} \"Textarea\" \"A placeholder\" data [:some-text] :inline true)"}, button-group {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 227, :column 7, :end-line 227, :end-column 19, :arglists (quote ([& args])), :doc "Button group.\n\n   Arguments:\n\n   [attrs] button-1 ... button-n\n\n   - attrs        - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/button-group, :variadic true, :file "src/reforms/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Button group.\n\n   Arguments:\n\n   [attrs] button-1 ... button-n\n\n   - attrs        - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)"}, datetime {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 385, :column 7, :end-line 385, :end-column 15, :arglists (quote ([& args])), :doc "Datetime input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/datetime, :variadic true, :file "src/reforms/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Datetime input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}, url {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/core.cljs", :line 481, :column 7, :end-line 481, :end-column 10, :arglists (quote ([& args])), :doc "Url input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core/url, :variadic true, :file "src/reforms/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 481, :end-line 481, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Url input. See http://getbootstrap.com/css/#inputs\n\n   Arguments:\n\n   See [[html5-input]]\n\n   **Important:** May be unsupported by some popular browsers.\n   For compatilibity and available attributes see http://www.w3schools.com/html/html_form_input_types.asp"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:button-default :datetime-local :html5-input :el :email :date :week :wrap :group-title :valid? :color :key :placeholder :disabled :in-progress :radio :number :button :password :checkbox :name :value :time :month :error-label :validation-error-fn :type :close :search :on-click :icon-close :tel :style :textarea :panel :div :option :button-group :label :id :class :checked :url :datetime :on-submit :display :form :tag :input :on-change :h3 :i :onClick :inline :button-primary :select :text}, :order [:panel :class :key :close :div :h3 :i :onClick :icon-close :form :on-submit :button :type :style :display :group-title :tag :html5-input :text :password :in-progress :disabled :on-click :button-primary :button-default :button-group :checkbox :valid? :validation-error-fn :inline :wrap :label :input :on-change :checked :id :error-label :radio :name :value :el :textarea :placeholder :select :option :datetime :datetime-local :date :month :time :week :number :email :url :search :tel :color]}, :doc "Core controls and helpers."}