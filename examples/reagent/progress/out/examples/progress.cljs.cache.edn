;; Analyzed by ClojureScript 0.0-3308
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name examples.progress, :imports nil, :requires {f reforms.reagent, reforms.reagent reforms.reagent, v reforms.validation, reforms.validation reforms.validation, reagent.core reagent.core, utils examples.shared.utils, examples.shared.utils examples.shared.utils, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, atom reagent.core, <! cljs.core.async, render-component reagent.core}, :defs {app-state {:name examples.progress/app-state, :file "examples/progress/src/progress.cljs", :line 9, :column 1, :end-line 9, :end-column 15, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/progress/src/progress.cljs", :line 9, :column 6, :end-line 9, :end-column 15}}, simulate-long-operation! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/progress/src/progress.cljs", :line 11, :column 7, :end-line 11, :end-column 31, :arglists (quote ([operation data success]))}, :name examples.progress/simulate-long-operation!, :variadic false, :file "examples/progress/src/progress.cljs", :end-column 31, :method-params ([operation data success]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([operation data success]))}, start-succeed! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/progress/src/progress.cljs", :line 21, :column 7, :end-line 21, :end-column 21, :arglists (quote ([operation data]))}, :name examples.progress/start-succeed!, :variadic false, :file "examples/progress/src/progress.cljs", :end-column 21, :method-params ([operation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([operation data]))}, start-fail! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/progress/src/progress.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([operation data]))}, :name examples.progress/start-fail!, :variadic false, :file "examples/progress/src/progress.cljs", :end-column 18, :method-params ([operation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([operation data]))}, simple-view {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/progress/src/progress.cljs", :line 29, :column 7, :end-line 29, :end-column 18, :arglists (quote ([data]))}, :name examples.progress/simple-view, :variadic false, :file "examples/progress/src/progress.cljs", :end-column 18, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, main-view {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/progress/src/progress.cljs", :line 44, :column 7, :end-line 44, :end-column 16, :arglists (quote ([]))}, :name examples.progress/main-view, :variadic false, :file "examples/progress/src/progress.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, f reforms.reagent, reforms.reagent reforms.reagent, v reforms.validation, reforms.validation reforms.validation}, :cljs.analyzer/constants {:seen #{:key :disabled :in-progress :else :name :op1 :recur :div :operation-failed :op2 :br :progress}, :order [:name :progress :recur :operation-failed :else :key :op1 :in-progress :disabled :op2 :div :br]}, :doc nil}