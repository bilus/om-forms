;; Analyzed by ClojureScript 1.7.122
{:name reforms.binding.protocol, :doc nil, :excludes #{-swap! -deref -reset!}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {IBinding {:meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/simple/out/reforms/binding/protocol.cljs", :line 7, :column 14, :end-line 7, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-valid? [[x]], -deref [[x]], -reset! [[x v] [x ks v]], -swap! [[x f] [x ks f]], -get-in [[x ks]], -path [[x]]}}}, :protocol-symbol true, :name reforms.binding.protocol/IBinding, :file "examples/simple/out/reforms/binding/protocol.cljs", :end-column 22, :column 1, :line 7, :protocol-info {:methods {-valid? [[x]], -deref [[x]], -reset! [[x v] [x ks v]], -swap! [[x f] [x ks f]], -get-in [[x ks]], -path [[x]]}}, :info nil, :end-line 7, :impls #{}, :doc nil, :jsdoc ("@interface")}, -valid? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/simple/out/reforms/binding/protocol.cljs", :line 8, :column 4, :end-line 8, :end-column 11, :protocol reforms.binding.protocol/IBinding, :doc nil, :arglists (quote ([x]))}, :protocol reforms.binding.protocol/IBinding, :name reforms.binding.protocol/-valid?, :variadic false, :file "examples/simple/out/reforms/binding/protocol.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil}, -deref {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/simple/out/reforms/binding/protocol.cljs", :line 9, :column 4, :end-line 9, :end-column 10, :protocol reforms.binding.protocol/IBinding, :doc nil, :arglists (quote ([x]))}, :protocol reforms.binding.protocol/IBinding, :name reforms.binding.protocol/-deref, :variadic false, :file "examples/simple/out/reforms/binding/protocol.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil}, -reset! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/simple/out/reforms/binding/protocol.cljs", :line 10, :column 4, :end-line 10, :end-column 11, :protocol reforms.binding.protocol/IBinding, :doc nil, :arglists (quote ([x v] [x ks v])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x v] [x ks v]), :arglists ([x v] [x ks v]), :arglists-meta (nil nil)}}, :protocol reforms.binding.protocol/IBinding, :name reforms.binding.protocol/-reset!, :variadic false, :file "examples/simple/out/reforms/binding/protocol.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x v] [x ks v]), :arglists ([x v] [x ks v]), :arglists-meta (nil nil)}, :method-params ([x v] [x ks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists ([x v] [x ks v]), :doc nil}, -swap! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/simple/out/reforms/binding/protocol.cljs", :line 11, :column 4, :end-line 11, :end-column 10, :protocol reforms.binding.protocol/IBinding, :doc nil, :arglists (quote ([x f] [x ks f])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x f] [x ks f]), :arglists ([x f] [x ks f]), :arglists-meta (nil nil)}}, :protocol reforms.binding.protocol/IBinding, :name reforms.binding.protocol/-swap!, :variadic false, :file "examples/simple/out/reforms/binding/protocol.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x f] [x ks f]), :arglists ([x f] [x ks f]), :arglists-meta (nil nil)}, :method-params ([x f] [x ks f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists ([x f] [x ks f]), :doc nil}, -get-in {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/simple/out/reforms/binding/protocol.cljs", :line 12, :column 4, :end-line 12, :end-column 11, :protocol reforms.binding.protocol/IBinding, :doc nil, :arglists (quote ([x ks]))}, :protocol reforms.binding.protocol/IBinding, :name reforms.binding.protocol/-get-in, :variadic false, :file "examples/simple/out/reforms/binding/protocol.cljs", :end-column 11, :method-params ([x ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ks])), :doc nil}, -path {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/simple/out/reforms/binding/protocol.cljs", :line 13, :column 4, :end-line 13, :end-column 9, :protocol reforms.binding.protocol/IBinding, :doc nil, :arglists (quote ([x]))}, :protocol reforms.binding.protocol/IBinding, :name reforms.binding.protocol/-path, :variadic false, :file "examples/simple/out/reforms/binding/protocol.cljs", :end-column 9, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil}}}