;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name reforms.core.options, :imports nil, :requires nil, :uses nil, :defs {*options* {:name reforms.core.options/*options*, :file "examples/hello_world/out/reforms/core/options.cljs", :line 10, :column 1, :end-line 10, :end-column 25, :dynamic true, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/hello_world/out/reforms/core/options.cljs", :line 10, :column 16, :end-line 10, :end-column 25, :dynamic true}, :doc "Note that top-level key corresponds to a helper in [[reforms.core]].\n\n  Common for all form helpers:\n\n  - :attrs - specify attributes to be passed to React node; see see https://github.com/r0man/sablono#html-attributes\n\n  Example:\n\n      ;; Set background of every form to red color.\n      (set-options! {:form {:attrs {:style {:background-color \"red\"}}}})\n\n  - :icon-warning           - icon to represent a warning\n  - :form                   - options for [[reforms.core/form]]\n      - :horizontal         - set to true for horizontal orientation; see http://getbootstrap.com/css/#forms-horizontal\n      - :label-column-class - class for the label column (horizontal orientation only), e.g. \"col-sm-3\"\n      - :input-column-class - class for the input column (horizontal orientation only), e.g. \"col-sm-9\"\n  - :panel                  - options for [[reforms.core/panel]]\n        - :icon-close       - close panel icon\n  - :html5-input            - options for [[reforms.core/html5-input]], common for all helpers based on it, e.g. [[reforms.core/text]]\n  - :text                   - options for [[reforms.core/text]]\n      Same as for :html-5-input\n  - group-title             - options for [[reforms.core/group-title]]\n      - :tag                - tag to use, e.g. :h4\n  - button-group            - options for [[reforms.core/button-group]]\n  - :spinner                - options for [[reforms.core/spinner]].\n\n  ... Each helper is supported - :password, :select, :color etc. see [[reforms.core]] for available form helpers...\n\n\n  For the defaults, see the source."}, merge-options {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/hello_world/out/reforms/core/options.cljs", :line 52, :column 7, :end-line 52, :end-column 20, :arglists (quote ([options] [prev-options new-options])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([options] [prev-options new-options]), :arglists ([options] [prev-options new-options]), :arglists-meta (nil nil)}}, :name reforms.core.options/merge-options, :variadic false, :file "examples/hello_world/out/reforms/core/options.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([options] [prev-options new-options]), :arglists ([options] [prev-options new-options]), :arglists-meta (nil nil)}, :method-params ([options] [prev-options new-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists ([options] [prev-options new-options])}, get-options {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/hello_world/out/reforms/core/options.cljs", :line 64, :column 7, :end-line 64, :end-column 18, :arglists (quote ([ks])), :doc "See [[reforms.core/get-options]]"}, :name reforms.core.options/get-options, :variadic false, :file "examples/hello_world/out/reforms/core/options.cljs", :end-column 18, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks])), :doc "See [[reforms.core/get-options]]"}, set-options! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/examples/hello_world/out/reforms/core/options.cljs", :line 69, :column 7, :end-line 69, :end-column 19, :arglists (quote ([options])), :doc "See [[reforms.core/set-options!]]"}, :name reforms.core.options/set-options!, :variadic false, :file "examples/hello_world/out/reforms/core/options.cljs", :end-column 19, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options])), :doc "See [[reforms.core/set-options!]]"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:html5-input :align :label-column-class :horizontal :group-title :else :input-column-class :icon-warning :error-label :warning-label :spinner :icon-close :panel :button-group :class :attrs :h2 :form :tag}, :order [:form :panel :html5-input :group-title :button-group :spinner :error-label :warning-label :horizontal :label-column-class :input-column-class :icon-close :icon-warning :tag :h2 :align :attrs :class :else]}, :doc "Configuration options. You can override the defaults using [[set-options!]] or [[with-options]]."}