;; Analyzed by ClojureScript 1.7.122
{:name reforms.binding.core, :doc nil, :excludes #{-deref reset! swap! -reset! deref get-in}, :use-macros nil, :require-macros nil, :uses {-swap! reforms.binding.protocol, -get-in reforms.binding.protocol, -deref reforms.binding.protocol, -valid? reforms.binding.protocol, -path reforms.binding.protocol, -reset! reforms.binding.protocol}, :requires {reforms.binding.protocol reforms.binding.protocol}, :imports nil, :defs {valid? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/../reforms/src/reforms/binding/core.cljs", :line 12, :column 7, :end-line 12, :end-column 13, :arglists (quote ([x]))}, :name reforms.binding.core/valid?, :variadic false, :file "../reforms/src/reforms/binding/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, deref {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/../reforms/src/reforms/binding/core.cljs", :line 15, :column 7, :end-line 15, :end-column 12, :arglists (quote ([x]))}, :name reforms.binding.core/deref, :variadic false, :file "../reforms/src/reforms/binding/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, reset! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/../reforms/src/reforms/binding/core.cljs", :line 18, :column 7, :end-line 18, :end-column 13, :arglists (quote ([x v] [x ks v])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x v] [x ks v]), :arglists ([x v] [x ks v]), :arglists-meta (nil nil)}}, :name reforms.binding.core/reset!, :variadic false, :file "../reforms/src/reforms/binding/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x v] [x ks v]), :arglists ([x v] [x ks v]), :arglists-meta (nil nil)}, :method-params ([x v] [x ks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists ([x v] [x ks v])}, swap! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/../reforms/src/reforms/binding/core.cljs", :line 26, :column 7, :end-line 26, :end-column 12, :arglists (quote ([x f] [x ks f])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x f] [x ks f]), :arglists ([x f] [x ks f]), :arglists-meta (nil nil)}}, :name reforms.binding.core/swap!, :variadic false, :file "../reforms/src/reforms/binding/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x f] [x ks f]), :arglists ([x f] [x ks f]), :arglists-meta (nil nil)}, :method-params ([x f] [x ks f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists ([x f] [x ks f])}, get-in {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/../reforms/src/reforms/binding/core.cljs", :line 34, :column 7, :end-line 34, :end-column 13, :arglists (quote ([x ks]))}, :name reforms.binding.core/get-in, :variadic false, :file "../reforms/src/reforms/binding/core.cljs", :end-column 13, :method-params ([x ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ks]))}, path {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reagent-reforms/../reforms/src/reforms/binding/core.cljs", :line 39, :column 7, :end-line 39, :end-column 11, :arglists (quote ([x]))}, :name reforms.binding.core/path, :variadic false, :file "../reforms/src/reforms/binding/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}}