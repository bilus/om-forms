;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{time}, :name reforms.validation, :imports nil, :requires {f reforms.core, reforms.core reforms.core, om om.core, om.core om.core, str clojure.string, clojure.string clojure.string}, :uses nil, :defs {*validation-errors* {:name reforms.validation/*validation-errors*, :file "src/reforms/validation.cljs", :line 42, :column 1, :end-line 42, :end-column 35, :dynamic true, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 42, :column 16, :end-line 42, :end-column 35, :dynamic true}}, present? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([x]))}, :name reforms.validation/present?, :variadic false, :file "src/reforms/validation.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, equal {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 117, :column 7, :end-line 117, :end-column 12, :arglists (quote ([korks1 korks2 error-message])), :doc "Equality validator.\n\n   Example:\n\n       (equal [:user :password1] [:user :password2] \"Passwords do not match\"]"}, :name reforms.validation/equal, :variadic false, :file "src/reforms/validation.cljs", :end-column 12, :method-params ([korks1 korks2 error-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 3, :fn-var true, :arglists (quote ([korks1 korks2 error-message])), :doc "Equality validator.\n\n   Example:\n\n       (equal [:user :password1] [:user :password2] \"Passwords do not match\"]"}, button-primary {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 247, :column 7, :end-line 247, :end-column 21, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/button-primary]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/button-primary, :variadic true, :file "src/reforms/validation.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/button-primary]] adding support for validation."}, text {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 222, :column 7, :end-line 222, :end-column 11, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/text]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/text, :variadic true, :file "src/reforms/validation.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/text]] adding support for validation."}, select {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 237, :column 7, :end-line 237, :end-column 13, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/select]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/select, :variadic true, :file "src/reforms/validation.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/select]] adding support for validation."}, datetime-local {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 262, :column 7, :end-line 262, :end-column 21, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/datetime-local]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/datetime-local, :variadic true, :file "src/reforms/validation.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/datetime-local]] adding support for validation."}, button-default {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 252, :column 7, :end-line 252, :end-column 21, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/button-default]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/button-default, :variadic true, :file "src/reforms/validation.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/button-default]] adding support for validation."}, html5-input {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 212, :column 7, :end-line 212, :end-column 18, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/html5-input]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/html5-input, :variadic true, :file "src/reforms/validation.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/html5-input]] adding support for validation."}, email {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 292, :column 7, :end-line 292, :end-column 12, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/email]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/email, :variadic true, :file "src/reforms/validation.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/email]] adding support for validation."}, date {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 267, :column 7, :end-line 267, :end-column 11, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/date]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/date, :variadic true, :file "src/reforms/validation.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/date]] adding support for validation."}, force-error {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 166, :column 7, :end-line 166, :end-column 18, :arglists (quote ([korks error-message])), :doc "Generates an error. Useful for errors not coming from data but from external sources such as Ajax or RPC.\n\n   Example:\n\n       (force-error [:server-error] \"Problem connecting to the REST API server\")"}, :name reforms.validation/force-error, :variadic false, :file "src/reforms/validation.cljs", :end-column 18, :method-params ([korks error-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([korks error-message])), :doc "Generates an error. Useful for errors not coming from data but from external sources such as Ajax or RPC.\n\n   Example:\n\n       (force-error [:server-error] \"Problem connecting to the REST API server\")"}, week {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 282, :column 7, :end-line 282, :end-column 11, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/week]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/week, :variadic true, :file "src/reforms/validation.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/week]] adding support for validation."}, validate! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 191, :column 7, :end-line 191, :end-column 16, :arglists (quote ([cursor ui-state-cursor & validators])), :doc "Validates data and saves the result. **A stateful method.**\n\n   Arguments:\n\n   - cursor          - the data to validate\n   - ui-state-cursor - this is where validation result will be stored\n   - validators      - a seq of validators", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(cursor ui-state-cursor validators)], :arglists ([cursor ui-state-cursor & validators]), :arglists-meta (nil)}}, :name reforms.validation/validate!, :variadic true, :file "src/reforms/validation.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(cursor ui-state-cursor validators)], :arglists ([cursor ui-state-cursor & validators]), :arglists-meta (nil)}, :method-params [(cursor ui-state-cursor validators)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists ([cursor ui-state-cursor & validators]), :doc "Validates data and saves the result. **A stateful method.**\n\n   Arguments:\n\n   - cursor          - the data to validate\n   - ui-state-cursor - this is where validation result will be stored\n   - validators      - a seq of validators"}, validation-errors {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 204, :column 7, :end-line 204, :end-column 24, :arglists (quote ([ui-state-cursor])), :doc "Returns validation errors saved by [[validate!]] into ui-state-cursor."}, :name reforms.validation/validation-errors, :variadic false, :file "src/reforms/validation.cljs", :end-column 24, :method-params ([ui-state-cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ui-state-cursor])), :doc "Returns validation errors saved by [[validate!]] into ui-state-cursor."}, validating-field {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 44, :column 7, :end-line 44, :end-column 23, :arglists (quote ([field-fn & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(field-fn args)], :arglists ([field-fn & args]), :arglists-meta (nil)}}, :name reforms.validation/validating-field, :variadic true, :file "src/reforms/validation.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(field-fn args)], :arglists ([field-fn & args]), :arglists-meta (nil)}, :method-params [(field-fn args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists ([field-fn & args])}, find-validation-error {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 19, :column 7, :end-line 19, :end-column 28, :arglists (quote ([kork errors]))}, :name reforms.validation/find-validation-error, :variadic false, :file "src/reforms/validation.cljs", :end-column 28, :method-params ([kork errors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kork errors]))}, valid? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 87, :column 7, :end-line 87, :end-column 13, :arglists (quote ([errors] [kork errors])), :doc "Returns true if there are no errors.\n\n   Arguments:\n\n   - errors - result of validation\n   - kork   - (optional) match against this key seq", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([errors] [kork errors]), :arglists ([errors] [kork errors]), :arglists-meta (nil nil)}}, :name reforms.validation/valid?, :variadic false, :file "src/reforms/validation.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([errors] [kork errors]), :arglists ([errors] [kork errors]), :arglists-meta (nil nil)}, :method-params ([errors] [kork errors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists ([errors] [kork errors]), :doc "Returns true if there are no errors.\n\n   Arguments:\n\n   - errors - result of validation\n   - kork   - (optional) match against this key seq"}, color {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 312, :column 7, :end-line 312, :end-column 12, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/color]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/color, :variadic true, :file "src/reforms/validation.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/color]] adding support for validation."}, validate {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 74, :column 7, :end-line 74, :end-column 15, :arglists (quote ([cursor & validators])), :doc "Validates a cursor and returns a list of errors.\n\n   Arguments:\n\n   - cursor     - data\n   - validators - seq of validators to use", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(cursor validators)], :arglists ([cursor & validators]), :arglists-meta (nil)}}, :name reforms.validation/validate, :variadic true, :file "src/reforms/validation.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(cursor validators)], :arglists ([cursor & validators]), :arglists-meta (nil)}, :method-params [(cursor validators)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists ([cursor & validators]), :doc "Validates a cursor and returns a list of errors.\n\n   Arguments:\n\n   - cursor     - data\n   - validators - seq of validators to use"}, error-alert {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 317, :column 7, :end-line 317, :end-column 18, :arglists (quote ([& korks])), :doc "Renders errors for specified key seqs.\n\n  Example:\n\n      (render-errors [:user :name] [:my-custom-error])", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(korks)], :arglists ([& korks]), :arglists-meta (nil)}}, :name reforms.validation/error-alert, :variadic true, :file "src/reforms/validation.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(korks)], :arglists ([& korks]), :arglists-meta (nil)}, :method-params [(korks)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 0, :fn-var true, :arglists ([& korks]), :doc "Renders errors for specified key seqs.\n\n  Example:\n\n      (render-errors [:user :name] [:my-custom-error])"}, number {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 287, :column 7, :end-line 287, :end-column 13, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/number]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/number, :variadic true, :file "src/reforms/validation.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/number]] adding support for validation."}, validation-error {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 60, :column 7, :end-line 60, :end-column 23, :arglists (quote ([korks error-message])), :doc "Returns a validation error for a key sequence.\n\n   Arguments:\n\n   - korks         - key sequence the error refers to\n   - error-message - string containing the error message"}, :name reforms.validation/validation-error, :variadic false, :file "src/reforms/validation.cljs", :end-column 23, :method-params ([korks error-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([korks error-message])), :doc "Returns a validation error for a key sequence.\n\n   Arguments:\n\n   - korks         - key sequence the error refers to\n   - error-message - string containing the error message"}, password {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 217, :column 7, :end-line 217, :end-column 15, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/password]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/password, :variadic true, :file "src/reforms/validation.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/password]] adding support for validation."}, checkbox {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 232, :column 7, :end-line 232, :end-column 15, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/checkbox]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/checkbox, :variadic true, :file "src/reforms/validation.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/checkbox]] adding support for validation."}, present {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 131, :column 7, :end-line 131, :end-column 14, :arglists (quote ([korks error-message])), :doc "Presence validator.\n\n  Example:\n\n      (present [:user :login] \"Enter the login\"]"}, :name reforms.validation/present, :variadic false, :file "src/reforms/validation.cljs", :end-column 14, :method-params ([korks error-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([korks error-message])), :doc "Presence validator.\n\n  Example:\n\n      (present [:user :login] \"Enter the login\"]"}, button {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 242, :column 7, :end-line 242, :end-column 13, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/button]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/button, :variadic true, :file "src/reforms/validation.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/button]] adding support for validation."}, render-errors {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 103, :column 7, :end-line 103, :end-column 20, :arglists (quote ([errors])), :doc "Renders errors as unordered list.\n\n   Arguments:\n\n   - errors - results of validation"}, :name reforms.validation/render-errors, :variadic false, :file "src/reforms/validation.cljs", :end-column 20, :method-params ([errors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([errors])), :doc "Renders errors as unordered list.\n\n   Arguments:\n\n   - errors - results of validation"}, validating-fields-fn {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 52, :column 7, :end-line 52, :end-column 27, :arglists (quote ([validation-errors & fields])), :doc "Used by [reforms.validation/validating-fields] macro.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(validation-errors fields)], :arglists ([validation-errors & fields]), :arglists-meta (nil)}}, :name reforms.validation/validating-fields-fn, :variadic true, :file "src/reforms/validation.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(validation-errors fields)], :arglists ([validation-errors & fields]), :arglists-meta (nil)}, :method-params [(validation-errors fields)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([validation-errors & fields]), :doc "Used by [reforms.validation/validating-fields] macro."}, time {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 277, :column 7, :end-line 277, :end-column 11, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/time]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/time, :variadic true, :file "src/reforms/validation.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/time]] adding support for validation."}, month {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 272, :column 7, :end-line 272, :end-column 12, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/month]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/month, :variadic true, :file "src/reforms/validation.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/month]] adding support for validation."}, all {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 182, :column 7, :end-line 182, :end-column 10, :arglists (quote ([& validators])), :doc "Groups validators using 'and' boolean logic.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(validators)], :arglists ([& validators]), :arglists-meta (nil)}}, :name reforms.validation/all, :variadic true, :file "src/reforms/validation.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(validators)], :arglists ([& validators]), :arglists-meta (nil)}, :method-params [(validators)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 0, :fn-var true, :arglists ([& validators]), :doc "Groups validators using 'and' boolean logic."}, matches {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 143, :column 7, :end-line 143, :end-column 14, :arglists (quote ([korks re error-message])), :doc "Regex validator.\n\n  Example:\n\n      (matches [:user :email] #\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$\" \"Invalid email address\"]"}, :name reforms.validation/matches, :variadic false, :file "src/reforms/validation.cljs", :end-column 14, :method-params ([korks re error-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 3, :fn-var true, :arglists (quote ([korks re error-message])), :doc "Regex validator.\n\n  Example:\n\n      (matches [:user :email] #\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$\" \"Invalid email address\"]"}, search {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 302, :column 7, :end-line 302, :end-column 13, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/search]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/search, :variadic true, :file "src/reforms/validation.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/search]] adding support for validation."}, tel {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 307, :column 7, :end-line 307, :end-column 10, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/tel]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/tel, :variadic true, :file "src/reforms/validation.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/tel]] adding support for validation."}, no-error {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 176, :column 7, :end-line 176, :end-column 15, :arglists (quote ([])), :doc "Generates a 'no error' placeholder."}, :name reforms.validation/no-error, :variadic false, :file "src/reforms/validation.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Generates a 'no error' placeholder."}, textarea {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 227, :column 7, :end-line 227, :end-column 15, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/textarea]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/textarea, :variadic true, :file "src/reforms/validation.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/textarea]] adding support for validation."}, invalid? {:name reforms.validation/invalid?, :file "src/reforms/validation.cljs", :line 99, :column 1, :end-line 99, :end-column 14, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 99, :column 6, :end-line 99, :end-column 14}, :doc "Complement of [[valid?]]"}, datetime {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 257, :column 7, :end-line 257, :end-column 15, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/datetime]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/datetime, :variadic true, :file "src/reforms/validation.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/datetime]] adding support for validation."}, sequable? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 27, :column 7, :end-line 27, :end-column 16, :arglists (quote ([x]))}, :name reforms.validation/sequable?, :variadic false, :file "src/reforms/validation.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, url {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 297, :column 7, :end-line 297, :end-column 10, :arglists (quote ([& args])), :doc "Wrapper for [[reforms.core/url]] adding support for validation.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.validation/url, :variadic true, :file "src/reforms/validation.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Wrapper for [[reforms.core/url]] adding support for validation."}, is-true {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/validation.cljs", :line 155, :column 7, :end-line 155, :end-column 14, :arglists (quote ([korks f error-message])), :doc "Predicate-based validator.\n\n  Example:\n\n     (is-true [:user :email] #(nil? (find-by-email %)) \"Email already exists\"]"}, :name reforms.validation/is-true, :variadic false, :file "src/reforms/validation.cljs", :end-column 14, :method-params ([korks f error-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 3, :fn-var true, :arglists (quote ([korks f error-message])), :doc "Predicate-based validator.\n\n  Example:\n\n     (is-true [:user :email] #(nil? (find-by-email %)) \"Email already exists\"]"}}, :require-macros {om om.core, om.core om.core}, :cljs.analyzer/constants {:seen #{:validation-errors :ul :valid? :else :li :validation-error-fn :class :error-message :korks}, :order [:korks :else :validation-error-fn :valid? :error-message :ul :class :li :validation-errors]}, :doc "Validation functionality."}