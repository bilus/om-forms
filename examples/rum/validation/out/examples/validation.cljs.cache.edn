;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name examples.validation, :imports nil, :requires {f reforms.rum, reforms.rum reforms.rum, v reforms.validation, reforms.validation reforms.validation, rum rum.core, rum.core rum.core, examples.shared.utils examples.shared.utils, str clojure.string, clojure.string clojure.string}, :uses {inspector-view examples.shared.utils}, :defs {customer-validators {:name examples.validation/customer-validators, :file "examples/validation/src/validation.cljs", :line 26, :column 1, :end-line 26, :end-column 25, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 26, :column 6, :end-line 26, :end-column 25}}, customer-list-view {:name examples.validation/customer-list-view, :file "examples/validation/src/validation.cljs", :line 70, :column 1, :end-line 70, :end-column 29, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 70, :column 11, :end-line 70, :end-column 29}}, main-view {:name examples.validation/main-view, :file "examples/validation/src/validation.cljs", :line 80, :column 1, :end-line 80, :end-column 20, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 80, :column 11, :end-line 80, :end-column 20}}, sign-up! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([customers customer ui-state]))}, :name examples.validation/sign-up!, :variadic false, :file "examples/validation/src/validation.cljs", :end-column 15, :method-params ([customers customer ui-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([customers customer ui-state]))}, ui-state {:name examples.validation/ui-state, :file "examples/validation/src/validation.cljs", :line 10, :column 1, :end-line 10, :end-column 14, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 10, :column 6, :end-line 10, :end-column 14}}, force-error! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 40, :column 7, :end-line 40, :end-column 19, :arglists (quote ([customer ui-state]))}, :name examples.validation/force-error!, :variadic false, :file "examples/validation/src/validation.cljs", :end-column 19, :method-params ([customer ui-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([customer ui-state]))}, positive-number {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 20, :column 7, :end-line 20, :end-column 22, :arglists (quote ([korks error-message]))}, :name examples.validation/positive-number, :variadic false, :file "examples/validation/src/validation.cljs", :end-column 22, :method-params ([korks error-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([korks error-message]))}, customers {:name examples.validation/customers, :file "examples/validation/src/validation.cljs", :line 8, :column 1, :end-line 8, :end-column 15, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 8, :column 6, :end-line 8, :end-column 15}}, customer {:name examples.validation/customer, :file "examples/validation/src/validation.cljs", :line 9, :column 1, :end-line 9, :end-column 14, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 9, :column 6, :end-line 9, :end-column 14}}, positive-number? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 16, :column 7, :end-line 16, :end-column 23, :arglists (quote ([s]))}, :name examples.validation/positive-number?, :variadic false, :file "examples/validation/src/validation.cljs", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, signup-form-view {:name examples.validation/signup-form-view, :file "examples/validation/src/validation.cljs", :line 47, :column 1, :end-line 47, :end-column 27, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/validation/src/validation.cljs", :line 47, :column 11, :end-line 47, :end-column 27}}}, :require-macros {f reforms.rum, reforms.rum reforms.rum, v reforms.validation, reforms.validation reforms.validation, rum rum.core, rum.core rum.core}, :cljs.analyzer/constants {:seen #{:password2 :warn-fn :label-column-class :age :placeholder :rum/class ui-state reforms.binding.core/valid? :server-error :input-column-class :city :password1 :form-horizontal :login :class :on-submit :first :last}, :order [:city :first :last :age :login :password1 :password2 :server-error :form-horizontal :label-column-class :input-column-class reforms.binding.core/valid? ui-state :on-submit :placeholder :warn-fn :rum/class :class]}, :doc nil}