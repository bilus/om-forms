;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name examples.progress, :imports nil, :requires {f reforms.rum, reforms.rum reforms.rum, v reforms.validation, reforms.validation reforms.validation, rum rum.core, rum.core rum.core, utils examples.shared.utils, examples.shared.utils examples.shared.utils, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async}, :defs {app-state {:name examples.progress/app-state, :file "examples/progress/src/progress.cljs", :line 9, :column 1, :end-line 9, :end-column 15, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/progress/src/progress.cljs", :line 9, :column 6, :end-line 9, :end-column 15}}, simulate-long-operation! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/progress/src/progress.cljs", :line 11, :column 7, :end-line 11, :end-column 31, :arglists (quote ([operation data success]))}, :name examples.progress/simulate-long-operation!, :variadic false, :file "examples/progress/src/progress.cljs", :end-column 31, :method-params ([operation data success]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([operation data success]))}, start-succeed! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/progress/src/progress.cljs", :line 21, :column 7, :end-line 21, :end-column 21, :arglists (quote ([operation data]))}, :name examples.progress/start-succeed!, :variadic false, :file "examples/progress/src/progress.cljs", :end-column 21, :method-params ([operation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([operation data]))}, start-fail! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/progress/src/progress.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([operation data]))}, :name examples.progress/start-fail!, :variadic false, :file "examples/progress/src/progress.cljs", :end-column 18, :method-params ([operation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([operation data]))}, simple-view {:name examples.progress/simple-view, :file "examples/progress/src/progress.cljs", :line 29, :column 1, :end-line 29, :end-column 22, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/progress/src/progress.cljs", :line 29, :column 11, :end-line 29, :end-column 22}}, main-view {:name examples.progress/main-view, :file "examples/progress/src/progress.cljs", :line 44, :column 1, :end-line 44, :end-column 20, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/rum-reforms/examples/progress/src/progress.cljs", :line 44, :column 11, :end-line 44, :end-column 20}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, f reforms.rum, reforms.rum reforms.rum, v reforms.validation, reforms.validation reforms.validation, rum rum.core, rum.core rum.core}, :cljs.analyzer/constants {:seen #{:key :placeholder :rum/class :disabled :in-progress data :else reforms.binding.core/valid? :name :op1 :recur :operation-failed :op2 :progress}, :order [:name :progress :recur :operation-failed :else :key reforms.binding.core/valid? data :placeholder :op1 :in-progress :disabled :op2 :rum/class]}, :doc nil}