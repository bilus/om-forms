;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{time}, :name reforms.core.impl, :imports {IdGenerator goog.ui.IdGenerator}, :requires {om om.core, om.core om.core, reforms.core.options reforms.core.options, str clojure.string, clojure.string clojure.string, set clojure.set, clojure.set clojure.set, IdGenerator goog.ui.IdGenerator}, :uses {get-options reforms.core.options}, :defs {html5-input* {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 178, :column 7, :end-line 178, :end-column 19, :arglists (quote ([attrs label placeholder cursor korks type & opts])), :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(attrs label placeholder cursor korks type opts)], :arglists ([attrs label placeholder cursor korks type & opts]), :arglists-meta (nil)}}, :name reforms.core.impl/html5-input*, :variadic true, :file "src/reforms/core/impl.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(attrs label placeholder cursor korks type opts)], :arglists ([attrs label placeholder cursor korks type & opts]), :arglists-meta (nil)}, :method-params [(attrs label placeholder cursor korks type opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 6, :fn-var true, :arglists ([attrs label placeholder cursor korks type & opts])}, resolve-args {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 139, :column 7, :end-line 139, :end-column 19, :arglists (quote ([ks ext-attrs args]))}, :name reforms.core.impl/resolve-args, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 19, :method-params ([ks ext-attrs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ext-attrs args]))}, input* {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 156, :column 7, :end-line 156, :end-column 13, :arglists (quote ([tag attrs label cursor korks {:keys [valid? validation-error-fn in-progress warn-fn help inline large]} & inner])), :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(tag attrs label cursor korks {:keys [valid? validation-error-fn in-progress warn-fn help inline large]} inner)], :arglists ([tag attrs label cursor korks {:keys [valid? validation-error-fn in-progress warn-fn help inline large]} & inner]), :arglists-meta (nil)}}, :name reforms.core.impl/input*, :variadic true, :file "src/reforms/core/impl.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(tag attrs label cursor korks {:keys [valid? validation-error-fn in-progress warn-fn help inline large]} inner)], :arglists ([tag attrs label cursor korks {:keys [valid? validation-error-fn in-progress warn-fn help inline large]} & inner]), :arglists-meta (nil)}, :method-params [(tag attrs label cursor korks {:keys [valid? validation-error-fn in-progress warn-fn help inline large]} inner)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 6, :fn-var true, :arglists ([tag attrs label cursor korks {:keys [valid? validation-error-fn in-progress warn-fn help inline large]} & inner])}, parse-options {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 151, :column 7, :end-line 151, :end-column 20, :arglists (quote ([args]))}, :name reforms.core.impl/parse-options, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 20, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args]))}, input-column {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 41, :column 7, :end-line 41, :end-column 19, :arglists (quote ([& elems])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(elems)], :arglists ([& elems]), :arglists-meta (nil)}}, :name reforms.core.impl/input-column, :variadic true, :file "src/reforms/core/impl.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(elems)], :arglists ([& elems]), :arglists-meta (nil)}, :method-params [(elems)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists ([& elems])}, unlabeled-control {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 83, :column 7, :end-line 83, :end-column 24, :arglists (quote ([inline & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(inline xs)], :arglists ([inline & xs]), :arglists-meta (nil)}}, :name reforms.core.impl/unlabeled-control, :variadic true, :file "src/reforms/core/impl.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(inline xs)], :arglists ([inline & xs]), :arglists-meta (nil)}, :method-params [(inline xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists ([inline & xs])}, unstr-option {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 47, :column 7, :end-line 47, :end-column 19, :arglists (quote ([s options])), :doc "Converts an option converted to string to be used in <select> tag back to its\n   representation as in options (it's often a keyword).\n\n   Example:\n\n   (unstr-option \":foo\"\n                [:foo \"foobar\" :foo2 \"zoobar\"]) ;; => :foo"}, :name reforms.core.impl/unstr-option, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 19, :method-params ([s options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s options])), :doc "Converts an option converted to string to be used in <select> tag back to its\n   representation as in options (it's often a keyword).\n\n   Example:\n\n   (unstr-option \":foo\"\n                [:foo \"foobar\" :foo2 \"zoobar\"]) ;; => :foo"}, labeled-control {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 92, :column 7, :end-line 92, :end-column 22, :arglists (quote ([inline form-group-class label dom-id & xs])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(inline form-group-class label dom-id xs)], :arglists ([inline form-group-class label dom-id & xs]), :arglists-meta (nil)}}, :name reforms.core.impl/labeled-control, :variadic true, :file "src/reforms/core/impl.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(inline form-group-class label dom-id xs)], :arglists ([inline form-group-class label dom-id & xs]), :arglists-meta (nil)}, :method-params [(inline form-group-class label dom-id xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 4, :fn-var true, :arglists ([inline form-group-class label dom-id & xs])}, parse-args {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 133, :column 7, :end-line 133, :end-column 17, :arglists (quote ([args]))}, :name reforms.core.impl/parse-args, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 17, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args]))}, label-column-class {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 31, :column 7, :end-line 31, :end-column 25, :arglists (quote ([]))}, :name reforms.core.impl/label-column-class, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, extend-attrs {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 106, :column 7, :end-line 106, :end-column 19, :arglists (quote ([attrs extensions]))}, :name reforms.core.impl/extend-attrs, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 19, :method-params ([attrs extensions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attrs extensions]))}, simple-checkbox {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 65, :column 7, :end-line 65, :end-column 22, :arglists (quote ([checked & {:keys [on-click]}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(checked {:keys [on-click]})], :arglists ([checked & {:keys [on-click]}]), :arglists-meta (nil)}}, :name reforms.core.impl/simple-checkbox, :variadic true, :file "src/reforms/core/impl.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(checked {:keys [on-click]})], :arglists ([checked & {:keys [on-click]}]), :arglists-meta (nil)}, :method-params [(checked {:keys [on-click]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists ([checked & {:keys [on-click]}])}, feedback-icon {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 61, :column 7, :end-line 61, :end-column 20, :arglists (quote ([class]))}, :name reforms.core.impl/feedback-icon, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 20, :method-params ([class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class]))}, override-attrs {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 117, :column 7, :end-line 117, :end-column 21, :arglists (quote ([old new]))}, :name reforms.core.impl/override-attrs, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 21, :method-params ([old new]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([old new]))}, all-selected? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 71, :column 7, :end-line 71, :end-column 20, :arglists (quote ([selected-values all-values]))}, :name reforms.core.impl/all-selected?, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 20, :method-params ([selected-values all-values]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selected-values all-values]))}, input-column-class {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 36, :column 7, :end-line 36, :end-column 25, :arglists (quote ([]))}, :name reforms.core.impl/input-column-class, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, merge-attrs {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 127, :column 7, :end-line 127, :end-column 18, :arglists (quote ([defaults overrides extensions]))}, :name reforms.core.impl/merge-attrs, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 18, :method-params ([defaults overrides extensions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 3, :fn-var true, :arglists (quote ([defaults overrides extensions]))}, form-horizontal? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 19, :column 7, :end-line 19, :end-column 23, :arglists (quote ([]))}, :name reforms.core.impl/form-horizontal?, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, error-label {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 75, :column 7, :end-line 75, :end-column 18, :arglists (quote ([error]))}, :name reforms.core.impl/error-label, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 18, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error]))}, warning-label {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 79, :column 7, :end-line 79, :end-column 20, :arglists (quote ([warning]))}, :name reforms.core.impl/warning-label, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 20, :method-params ([warning]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([warning]))}, spinner {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 190, :column 7, :end-line 190, :end-column 14, :arglists (quote ([& args])), :doc "A spinner.\n\n   Arguments:\n\n   [attrs]\n\n   attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name reforms.core.impl/spinner, :variadic true, :file "src/reforms/core/impl.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "A spinner.\n\n   Arguments:\n\n   [attrs]\n\n   attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)"}, gen-dom-id {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/src/reforms/core/impl.cljs", :line 23, :column 7, :end-line 23, :end-column 17, :arglists (quote ([path] [cursor korks] [])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([path] [cursor korks] []), :arglists ([path] [cursor korks] []), :arglists-meta (nil nil nil)}}, :name reforms.core.impl/gen-dom-id, :variadic false, :file "src/reforms/core/impl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([path] [cursor korks] []), :arglists ([path] [cursor korks] []), :arglists-meta (nil nil nil)}, :method-params ([path] [cursor korks] []), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists ([path] [cursor korks] [])}}, :require-macros {om om.core, om.core om.core}, :cljs.analyzer/constants {:seen #{:large :warn-fn :p.help-block :label-column-class :horizontal :valid? :key :placeholder :in-progress :else :input-column-class :value :icon-warning :validation-error-fn :type :div.form-group :spinner :on-click :div :for :label :id :class :checked :attrs :form :input :help :on-input :onChange :i :inline}, :order [:form :horizontal :label-column-class :input-column-class :div :class :i :on-click :input :onChange :checked :type :label :div.form-group :for :key :else :attrs :valid? :validation-error-fn :in-progress :warn-fn :help :inline :large :icon-warning :p.help-block :id :placeholder :on-input :value :spinner]}, :doc nil}