;; Analyzed by ClojureScript 0.0-3308
{:name reforms.binding.core, :doc nil, :excludes #{-deref reset! swap! -reset! deref get-in}, :use-macros nil, :require-macros nil, :uses {-get-in reforms.binding.protocol, -deref reforms.binding.protocol, -valid? reforms.binding.protocol, -path reforms.binding.protocol, -reset! reforms.binding.protocol}, :requires {reforms.binding.protocol reforms.binding.protocol}, :imports nil, :defs {valid? {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/binding/core.cljs", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([x]))}, :name reforms.binding.core/valid?, :variadic false, :file "src/reforms/binding/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, deref {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/binding/core.cljs", :line 10, :column 7, :end-line 10, :end-column 12, :arglists (quote ([x]))}, :name reforms.binding.core/deref, :variadic false, :file "src/reforms/binding/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, reset! {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/binding/core.cljs", :line 13, :column 7, :end-line 13, :end-column 13, :arglists (quote ([x v] [x ks v])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x v] [x ks v]), :arglists ([x v] [x ks v]), :arglists-meta (nil nil)}}, :name reforms.binding.core/reset!, :variadic false, :file "src/reforms/binding/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x v] [x ks v]), :arglists ([x v] [x ks v]), :arglists-meta (nil nil)}, :method-params ([x v] [x ks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists ([x v] [x ks v])}, get-in {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/binding/core.cljs", :line 19, :column 7, :end-line 19, :end-column 13, :arglists (quote ([x ks]))}, :name reforms.binding.core/get-in, :variadic false, :file "src/reforms/binding/core.cljs", :end-column 13, :method-params ([x ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ks]))}, path {:protocol-inline nil, :meta {:file "/Users/martinb/dev/clojure_apps/reforms/reforms/src/reforms/binding/core.cljs", :line 22, :column 7, :end-line 22, :end-column 11, :arglists (quote ([x]))}, :name reforms.binding.core/path, :variadic false, :file "src/reforms/binding/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}}